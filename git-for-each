#!/bin/bash

# Run command on each listed git repository, or on all repositories beneath the current directori

. "$(dirname "$0")/imports/exit-on-error" || exit 1

usage_print() {
    print_error "Usage:
   '$0 [-d (debug)] [-t (trace execution)] [-q (quiet)] <repository> ... -- <command> ...'
or '$0 [-d (debug)] [-t (trace execution)] [-q (quiet)] -a (all) [-b (only if on a branch)] -- <command> ...'"
}

[ $# -ge 3 ] || usage_error_exit "Not enough arguments"

all=
only_if_on_branch=
quiet=
debug=
# Note getopt consumes '--' (if it's present) and returns false, leaving OPTIND pointing at the option after '--'
while getopts ":abdqt" flag ; do
    case "$flag" in
        "a" ) all="y" ;;
        "b" ) only_if_on_branch="y" ;;
        "d" ) debug="y" ;;
        "q" ) quiet="y" ;;
        "t" ) set -x ;;
        ":" ) usage_error_exit "Missing argument to option '$OPTARG'" ;;
        "?" ) usage_error_exit "Unknown commandline option '$OPTARG'" ;;
        *   ) exit_with_error "Unhandled option '$OPTARG'" ;;
    esac
done
# Consume the options processed by getopt, except the last one, which we need so we can find the '--' delimiting the repos list.
# If getopt stopped without finding '--', we detect this later.
while [ $OPTIND -gt 1 ] && [ "$1" != "--" ] ; do
    shift
    (( OPTIND-- ))
done

[ -n "$debug" ] && echo "Debug mode, not executing commands"

# If not in 'all' mode, everything else up until '--' forms the list of repositories
declare -a repositories
if [ -n "$all" ]; then
    [ -n "$debug" ] && echo "Repos: (all)"
else
    i=0
    while [ $# -gt 0 ] && [ "$1" != "--" ]; do
        [ -n "$debug" ] && echo "Repos: $1"
        repositories[(( i++ ))]="$1"
        shift
    done
    [ $i -eq 0 ] && usage_error_exit "At least one repository must be specified"
fi

# Dashes separate command from args / repos list, always required
if [ "$1" = "--" ]; then
    shift
else
    usage_error_exit "Missing '--'"
fi

# The rest is the command to run in each repos - must be at least one word.
[ $# -ge 1 ] || usage_error_exit "No command specified"

if [ -n "$debug" ]; then
    echo "Command:
$@"
    exit 0
fi

# Don't rename these variables, they are meant to be available for use in the target command (under eval)
declare -x FULL_REPOS_DIR
declare -x RELATIVE_REPOS_DIR

run_command_in_dir() {
    local fail_behaviour="$1"
    local dir="$2"
    shift 2

    FULL_REPOS_DIR="$(readlink -mnq "$dir")"
    if [ ! -d "$FULL_REPOS_DIR" ]; then
        if [ "$fail_behaviour" = "--fail-on-missing" ]; then
            usage_error_exit "No such directory: '$FULL_REPOS_DIR'"
        else
            return 0
        fi
    fi
    cd "$FULL_REPOS_DIR"
    [ -d ".git" ] || usage_error_exit "Not a git repository: '$FULL_REPOS_DIR/.git' not found"
    [ -d ".git/refs" ] || usage_error_exit "Not a git repository: '$FULL_REPOS_DIR/.git/refs' not found"

    RELATIVE_REPOS_DIR="${FULL_REPOS_DIR#$rootdir/}"
    [ -n "$quiet" ] || echo "$RELATIVE_REPOS_DIR:"

    if [ -n "$only_if_on_branch" ] && ! git symbolic-ref -q HEAD >/dev/null ; then
        echo "--- Skipping (not on a branch) ---"
    else
        ( eval "$@" )
    fi

    [ -n "$quiet" ] || echo
}

rootdir="$PWD"
if [ -n "$all" ]; then
    find . -name ".git" -type d -print0 | sort --zero-terminated | while read -r -d $'\0' gitdir ; do
        [ -d "$rootdir/$gitdir/refs" ] || continue # Extra check that it actually contains git metadata and is not just a dir named '.git'
        # We allow items to be missing, because maven checks out temp git repositories under /target,
        # hence these may disappear part-way through iteration when cleaning the parent project
        run_command_in_dir --ignore-missing "$rootdir/$gitdir/.." "$@"
        :
    done
else
    for (( i=0 ; i < ${#repositories[@]} ; i++ )); do
        cd "$rootdir" # since it may be a relative path
        run_command_in_dir --fail-on-missing "${repositories[$i]}" "$@"
        :
    done
fi
