#!/bin/bash

# Run command on each listed git repository, or on all repositories beneath the current directori

. "/data/bin/imports/exit-on-error" || exit 1

usage() {
    exit_with_error "Usage: '$0 [--all | <repository> ... --] <command> ...'" 2
}

[ $# -ge 2 ] || usage

declare -a repositories
all=
if [ "$1" = "--all" ]; then
    all="y"
    shift
    if [ "$1" = "--" ]; then
        shift
    fi
else
    i=0
    while [ $# -gt 0 ] && [ "$1" != "--" ]; do
        repositories[(( i++ ))]="$1"
        shift
    done
    if [ "$1" = "--" ]; then
        shift
    else
        usage
    fi
fi
[ $# -ge 1 ] || usage

# Don't rename these variables, they are meant to be available for use in the target command (under eval)
declare -x FULL_REPOS_DIR
declare -x RELATIVE_REPOS_DIR

rootdir="$PWD"
if [ -n "$all" ]; then
    find . -name ".git" -type d -print0 | sort --zero-terminated | while read -r -d $'\0' gitdir ; do
        FULL_REPOS_DIR="$(readlink -enq "$rootdir/$gitdir/..")"
        RELATIVE_REPOS_DIR="${FULL_REPOS_DIR#$rootdir/}"
        cd "$FULL_REPOS_DIR"
        echo "$RELATIVE_REPOS_DIR:"
        ( eval "$@" )
        echo
        :
    done
else
    for (( i=0 ; i < ${#repositories[@]} ; i++ )); do
        cd "$rootdir" # since it may be a relative path
        # Don't rename these variables, they are meant to be available for use in the target command
        FULL_REPOS_DIR="$(readlink -mnq "${repositories[$i]}")"
        RELATIVE_REPOS_DIR="${FULL_REPOS_DIR#$rootdir/}"
        [ -d "$FULL_REPOS_DIR" ] || exit_with_error "No such directory: '$FULL_REPOS_DIR'" 3
        cd "$FULL_REPOS_DIR"
        echo "$RELATIVE_REPOS_DIR:"
        [ -d ".git" ] || exit_with_error "Not a git repository: '$FULL_REPOS_DIR/.git' not found" 4
        ( eval "$@" )
        echo
        :
    done
fi
